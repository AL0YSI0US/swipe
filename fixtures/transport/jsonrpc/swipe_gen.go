// Code generated by Swipe. DO NOT EDIT.

//go:generate swipe
package jsonrpc

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/metrics"
	prometheus2 "github.com/go-kit/kit/metrics/prometheus"
	"github.com/gorilla/mux"
	"github.com/l-vitaly/go-kit/transport/http/jsonrpc"
	"github.com/pquerna/ffjson/ffjson"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/swipe-io/swipe/fixtures/service"
	"github.com/swipe-io/swipe/fixtures/user"
	"net/http"
	"net/url"
	"time"
)

type createRequestServiceInterface struct {
	Name string `json:"name"`
	Data []byte `json:"data"`
}

type createResponseServiceInterface struct {
	Err error `json:"-"`
}

func (r createResponseServiceInterface) Failed() (_ error) {
	return r.Err
}

func makeCreateEndpoint(s service.Interface) endpoint.Endpoint {
	w := func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(createRequestServiceInterface)
		err := s.Create(ctx, req.Name, req.Data)
		return createResponseServiceInterface{Err: err}, nil
	}
	return w
}

type getRequestServiceInterface struct {
	Id    int     `json:"id"`
	Name  string  `json:"name"`
	Fname string  `json:"fname"`
	Price float32 `json:"price"`
	N     int     `json:"n"`
}

type getResponseServiceInterface struct {
	Data user.User `json:"data"`
	Err  error     `json:"-"`
}

func (r getResponseServiceInterface) Failed() (_ error) {
	return r.Err
}

func makeGetEndpoint(s service.Interface) endpoint.Endpoint {
	w := func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(getRequestServiceInterface)
		data, err := s.Get(ctx, req.Id, req.Name, req.Fname, req.Price, req.N)
		return getResponseServiceInterface{Data: data, Err: err}, nil
	}
	return w
}

type getAllResponseServiceInterface struct {
	Data []user.User `json:"data"`
	Err  error       `json:"-"`
}

func (r getAllResponseServiceInterface) Failed() (_ error) {
	return r.Err
}

func makeGetAllEndpoint(s service.Interface) endpoint.Endpoint {
	w := func(ctx context.Context, request interface{}) (interface{}, error) {
		data, err := s.GetAll(ctx)
		return getAllResponseServiceInterface{Data: data, Err: err}, nil
	}
	return w
}

type loggingMiddlewareServiceInterface struct {
	next   service.Interface
	logger log.Logger
}

func (s *loggingMiddlewareServiceInterface) Create(ctx context.Context, name string, data []byte) (err error) {
	defer func(now time.Time) {
		s.logger.Log("method", "Create", "took", time.Since(now), "name", name, "data", len(data), "err", err)
	}(time.Now())
	return s.next.Create(ctx, name, data)
}

func (s *loggingMiddlewareServiceInterface) Get(ctx context.Context, id int, name string, fname string, price float32, n int) (data user.User, err error) {
	defer func(now time.Time) {
		s.logger.Log("method", "Get", "took", time.Since(now), "id", id, "name", name, "fname", fname, "price", price, "n", n, "err", err)
	}(time.Now())
	return s.next.Get(ctx, id, name, fname, price, n)
}

func (s *loggingMiddlewareServiceInterface) GetAll(ctx context.Context) (data []user.User, err error) {
	defer func(now time.Time) {
		s.logger.Log("method", "GetAll", "took", time.Since(now), "data", len(data), "err", err)
	}(time.Now())
	return s.next.GetAll(ctx)
}

type instrumentingMiddlewareServiceInterface struct {
	next           service.Interface
	requestCount   metrics.Counter
	requestLatency metrics.Histogram
}

func (s *instrumentingMiddlewareServiceInterface) Create(ctx context.Context, name string, data []byte) (err error) {
	defer func(begin time.Time) {
		s.requestCount.With("method", "Create").Add(1)
		s.requestLatency.With("method", "Create").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.Create(ctx, name, data)
}

func (s *instrumentingMiddlewareServiceInterface) Get(ctx context.Context, id int, name string, fname string, price float32, n int) (data user.User, err error) {
	defer func(begin time.Time) {
		s.requestCount.With("method", "Get").Add(1)
		s.requestLatency.With("method", "Get").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.Get(ctx, id, name, fname, price, n)
}

func (s *instrumentingMiddlewareServiceInterface) GetAll(ctx context.Context) (data []user.User, err error) {
	defer func(begin time.Time) {
		s.requestCount.With("method", "GetAll").Add(1)
		s.requestLatency.With("method", "GetAll").Observe(time.Since(begin).Seconds())
	}(time.Now())
	return s.next.GetAll(ctx)
}

func ErrorDecode(code int) (_ error) {
	switch code {
	default:
		return fmt.Errorf("error code %d", code)
	case -32001:
		return new(service.ErrUnauthorized)
	}
}

type clientServiceInterfaceOption func(*clientServiceInterface)

func ServiceInterfaceGenericClientOptions(opt ...jsonrpc.ClientOption) (_ clientServiceInterfaceOption) {
	return func(c *clientServiceInterface) { c.genericClientOption = opt }
}

func ServiceInterfaceCreateClientOptions(opt ...jsonrpc.ClientOption) (_ clientServiceInterfaceOption) {
	return func(c *clientServiceInterface) { c.createClientOption = opt }
}

func ServiceInterfaceGetClientOptions(opt ...jsonrpc.ClientOption) (_ clientServiceInterfaceOption) {
	return func(c *clientServiceInterface) { c.getClientOption = opt }
}

func ServiceInterfaceGetAllClientOptions(opt ...jsonrpc.ClientOption) (_ clientServiceInterfaceOption) {
	return func(c *clientServiceInterface) { c.getAllClientOption = opt }
}

type clientServiceInterface struct {
	createEndpoint            endpoint.Endpoint
	createClientOption        []jsonrpc.ClientOption
	createEndpointMiddleware  []endpoint.Middleware
	getEndpoint               endpoint.Endpoint
	getClientOption           []jsonrpc.ClientOption
	getEndpointMiddleware     []endpoint.Middleware
	getAllEndpoint            endpoint.Endpoint
	getAllClientOption        []jsonrpc.ClientOption
	getAllEndpointMiddleware  []endpoint.Middleware
	genericClientOption       []jsonrpc.ClientOption
	genericEndpointMiddleware []endpoint.Middleware
}

func (c *clientServiceInterface) Create(ctx context.Context, name string, data []byte) (err error) {
	resp, err := c.createEndpoint(ctx, createRequestServiceInterface{Name: name, Data: data})
	if err != nil {
		return err
	}
	response := resp.(createResponseServiceInterface)
	return response.Err
}

func (c *clientServiceInterface) Get(ctx context.Context, id int, name string, fname string, price float32, n int) (data user.User, err error) {
	resp, err := c.getEndpoint(ctx, getRequestServiceInterface{Id: id, Name: name, Fname: fname, Price: price, N: n})
	if err != nil {
		return data, err
	}
	response := resp.(getResponseServiceInterface)
	return response.Data, response.Err
}

func (c *clientServiceInterface) GetAll(ctx context.Context) (data []user.User, err error) {
	resp, err := c.getAllEndpoint(ctx, nil)
	if err != nil {
		return data, err
	}
	response := resp.(getAllResponseServiceInterface)
	return response.Data, response.Err
}

func NewClientJSONRPCServiceInterface(tgt string, opts ...clientServiceInterfaceOption) (service.Interface, error) {
	c := &clientServiceInterface{}
	for _, o := range opts {
		o(c)
	}
	u, err := url.Parse(tgt)
	if err != nil {
		return nil, err
	}
	c.createClientOption = append(
		c.createClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(createRequestServiceInterface)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as createRequestServiceInterface, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, ErrorDecode(response.Error.Code)
			}
			var res createResponseServiceInterface
			err := ffjson.Unmarshal(response.Result, &res)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to createResponseServiceInterface: %s", err)
			}
			return res, nil
		}),
	)
	c.createEndpoint = jsonrpc.NewClient(
		u,
		"create",
		append(c.genericClientOption, c.createClientOption...)...,
	).Endpoint()
	for _, e := range c.createEndpointMiddleware {
		c.createEndpoint = e(c.createEndpoint)
	}
	c.getClientOption = append(
		c.getClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			req, ok := obj.(getRequestServiceInterface)
			if !ok {
				return nil, fmt.Errorf("couldn't assert request as getRequestServiceInterface, got %T", obj)
			}
			b, err := ffjson.Marshal(req)
			if err != nil {
				return nil, fmt.Errorf("couldn't marshal request %T: %s", obj, err)
			}
			return b, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, ErrorDecode(response.Error.Code)
			}
			var res getResponseServiceInterface
			err := ffjson.Unmarshal(response.Result, &res)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to getResponseServiceInterface: %s", err)
			}
			return res, nil
		}),
	)
	c.getEndpoint = jsonrpc.NewClient(
		u,
		"get",
		append(c.genericClientOption, c.getClientOption...)...,
	).Endpoint()
	for _, e := range c.getEndpointMiddleware {
		c.getEndpoint = e(c.getEndpoint)
	}
	c.getAllClientOption = append(
		c.getAllClientOption,
		jsonrpc.ClientRequestEncoder(func(_ context.Context, obj interface{}) (json.RawMessage, error) {
			return nil, nil
		}),
		jsonrpc.ClientResponseDecoder(func(_ context.Context, response jsonrpc.Response) (interface{}, error) {
			if response.Error != nil {
				return nil, ErrorDecode(response.Error.Code)
			}
			var res getAllResponseServiceInterface
			err := ffjson.Unmarshal(response.Result, &res)
			if err != nil {
				return nil, fmt.Errorf("couldn't unmarshal body to getAllResponseServiceInterface: %s", err)
			}
			return res, nil
		}),
	)
	c.getAllEndpoint = jsonrpc.NewClient(
		u,
		"getAll",
		append(c.genericClientOption, c.getAllClientOption...)...,
	).Endpoint()
	for _, e := range c.getAllEndpointMiddleware {
		c.getAllEndpoint = e(c.getAllEndpoint)
	}
	return c, nil
}

type serverServiceInterfaceOption func(*serverServiceInterfaceOpts)
type serverServiceInterfaceOpts struct {
	genericServerOption []jsonrpc.ServerOption
	createServerOption  []jsonrpc.ServerOption
	getServerOption     []jsonrpc.ServerOption
	getAllServerOption  []jsonrpc.ServerOption
}

func ServiceInterfaceGenericServerOptions(v ...jsonrpc.ServerOption) (_ serverServiceInterfaceOption) {
	return func(o *serverServiceInterfaceOpts) { o.genericServerOption = v }
}

// HTTP JSONRPC Transport
func encodeResponseJSONRPCServiceInterface(_ context.Context, result interface{}) (json.RawMessage, error) {
	b, err := ffjson.Marshal(result)
	if err != nil {
		return nil, err
	}
	return b, nil
}

func MakeHandlerJSONRPCServiceInterface(s service.Interface, logger log.Logger, opts ...serverServiceInterfaceOption) (http.Handler, error) {
	sopt := &serverServiceInterfaceOpts{}
	for _, o := range opts {
		o(sopt)
	}
	s = &loggingMiddlewareServiceInterface{next: s, logger: logger}
	s = &instrumentingMiddlewareServiceInterface{
		next: s,
		requestCount: prometheus2.NewCounterFrom(prometheus.CounterOpts{
			Namespace: "",
			Subsystem: "",
			Name:      "request_count",
			Help:      "Number of requests received.",
		}, []string{"method"}),
		requestLatency: prometheus2.NewSummaryFrom(prometheus.SummaryOpts{
			Namespace: "",
			Subsystem: "",
			Name:      "request_latency_microseconds",
			Help:      "Total duration of requests in microseconds.",
		}, []string{"method"}),
	}
	r := mux.NewRouter()
	handler := jsonrpc.NewServer(jsonrpc.EndpointCodecMap{
		"create": jsonrpc.EndpointCodec{
			Endpoint: makeCreateEndpoint(s),
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req createRequestServiceInterface
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to createRequestServiceInterface: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPCServiceInterface,
		},
		"get": jsonrpc.EndpointCodec{
			Endpoint: makeGetEndpoint(s),
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				var req getRequestServiceInterface
				err := ffjson.Unmarshal(msg, &req)
				if err != nil {
					return nil, fmt.Errorf("couldn't unmarshal body to getRequestServiceInterface: %s", err)
				}
				return req, nil
			},
			Encode: encodeResponseJSONRPCServiceInterface,
		},
		"getAll": jsonrpc.EndpointCodec{
			Endpoint: makeGetAllEndpoint(s),
			Decode: func(_ context.Context, msg json.RawMessage) (interface{}, error) {
				return nil, nil
			},
			Encode: encodeResponseJSONRPCServiceInterface,
		},
	}, sopt.genericServerOption...)
	r.Methods("POST").Path("/rpc/{method}").Handler(handler)
	return r, nil
}
