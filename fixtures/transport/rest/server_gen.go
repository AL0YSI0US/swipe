//+build !swipe

// Code generated by Swipe v1.20.0. DO NOT EDIT.

//go:generate swipe
package rest

import (
	"context"
	"fmt"
	"github.com/go-kit/kit/endpoint"
	fasthttp2 "github.com/l-vitaly/go-kit/transport/fasthttp"
	"github.com/pquerna/ffjson/ffjson"
	"github.com/qiangxue/fasthttp-routing"
	"github.com/swipe-io/swipe/fixtures/service"
	"github.com/valyala/fasthttp"
	"io"
	"strconv"
)

type errorWrapper struct {
	Error string `json:"error"`
}

func encodeResponseHTTPServiceInterface(ctx context.Context, w *fasthttp.Response, response interface{}) error {
	h := w.Header
	h.Set("Content-Interface", "application/json; charset=utf-8")
	if e, ok := response.(endpoint.Failer); ok && e.Failed() != nil {
		data, err := ffjson.Marshal(errorWrapper{Error: e.Failed().Error()})
		if err != nil {
			return err
		}
		w.SetBody(data)
		return nil
	}
	data, err := ffjson.Marshal(response)
	if err != nil {
		return err
	}
	w.SetBody(data)
	return nil
}

// HTTP REST Transport
func MakeHandlerRESTServiceInterface(s service.Interface, opts ...ServiceInterfaceServerOption) (fasthttp.RequestHandler, error) {
	sopt := &serverServiceInterfaceOpts{}
	for _, o := range opts {
		o(sopt)
	}
	ep := MakeEndpointSet(s)
	ep.CreateEndpoint = middlewareChain(append(sopt.genericEndpointMiddleware, sopt.createEndpointMiddleware...))(ep.CreateEndpoint)
	ep.DeleteEndpoint = middlewareChain(append(sopt.genericEndpointMiddleware, sopt.deleteEndpointMiddleware...))(ep.DeleteEndpoint)
	ep.GetEndpoint = middlewareChain(append(sopt.genericEndpointMiddleware, sopt.getEndpointMiddleware...))(ep.GetEndpoint)
	ep.GetAllEndpoint = middlewareChain(append(sopt.genericEndpointMiddleware, sopt.getAllEndpointMiddleware...))(ep.GetAllEndpoint)
	ep.TestMethodEndpoint = middlewareChain(append(sopt.genericEndpointMiddleware, sopt.testMethodEndpointMiddleware...))(ep.TestMethodEndpoint)
	r := routing.New()
	r.To(fasthttp.MethodPost, "/users", fasthttp2.NewServer(
		ep.CreateEndpoint,
		func(ctx context.Context, r *fasthttp.Request) (interface{}, error) {
			var req createRequestServiceInterface
			err := ffjson.Unmarshal(r.Body(), &req)
			if err != nil && err != io.EOF {
				return nil, fmt.Errorf("couldn't unmarshal body to createRequestServiceInterface: %s", err)
			}
			return req, nil
		},
		encodeResponseHTTPServiceInterface,
		append(sopt.genericServerOption, sopt.createServerOption...)...,
	).RouterHandle())
	r.To(fasthttp.MethodPost, "/delete", fasthttp2.NewServer(
		ep.DeleteEndpoint,
		func(ctx context.Context, r *fasthttp.Request) (interface{}, error) {
			var req deleteRequestServiceInterface
			err := ffjson.Unmarshal(r.Body(), &req)
			if err != nil && err != io.EOF {
				return nil, fmt.Errorf("couldn't unmarshal body to deleteRequestServiceInterface: %s", err)
			}
			return req, nil
		},
		encodeResponseHTTPServiceInterface,
		append(sopt.genericServerOption, sopt.deleteServerOption...)...,
	).RouterHandle())
	r.To(fasthttp.MethodGet, "/users/<name:[a-z]>", fasthttp2.NewServer(
		ep.GetEndpoint,
		func(ctx context.Context, r *fasthttp.Request) (interface{}, error) {
			var req getRequestServiceInterface
			vars, ok := ctx.Value(fasthttp2.ContextKeyRouter).(*routing.Context)
			if !ok {
				return nil, fmt.Errorf("couldn't assert fasthttp2.ContextKeyRouter to *routing.Context")
			}
			req.Name = vars.Param("name")
			q := r.URI().QueryArgs()
			priceFloat32, err := strconv.ParseFloat(string(q.Peek("price")), 32)
			if err != nil {
				return nil, fmt.Errorf("convert error: %w", err)
			}
			req.Price = float32(priceFloat32)
			nInt, err := strconv.Atoi(string(r.Header.Peek("x-num")))
			if err != nil {
				return nil, fmt.Errorf("convert error: %w", err)
			}
			req.N = int(nInt)
			return req, nil
		},
		encodeResponseHTTPServiceInterface,
		append(sopt.genericServerOption, sopt.getServerOption...)...,
	).RouterHandle())
	r.To(fasthttp.MethodGet, "/users", fasthttp2.NewServer(
		ep.GetAllEndpoint,
		func(ctx context.Context, r *fasthttp.Request) (interface{}, error) {
			return nil, nil
		},
		encodeResponseHTTPServiceInterface,
		append(sopt.genericServerOption, sopt.getAllServerOption...)...,
	).RouterHandle())
	r.To("GET", "/testMethod", fasthttp2.NewServer(
		ep.TestMethodEndpoint,
		func(ctx context.Context, r *fasthttp.Request) (interface{}, error) {
			var req testMethodRequestServiceInterface
			return req, nil
		},
		encodeResponseHTTPServiceInterface,
		append(sopt.genericServerOption, sopt.testMethodServerOption...)...,
	).RouterHandle())
	return r.HandleRequest, nil
}
